function IMU = loadIMU(filename, dataLines)
%IMPORTFILE Import data from a text file
%  GNSSLOG20231212102257H4 = IMPORTFILE(FILENAME) reads data from text
%  file FILENAME for the default selection.  Returns the data as a table.
%
%  GNSSLOG20231212102257H4 = IMPORTFILE(FILE, DATALINES) reads data for
%  the specified row interval(s) of text file FILENAME. Specify
%  DATALINES as a positive scalar integer or a N-by-2 array of positive
%  scalar integers for dis-contiguous row intervals.
%
%  Example:
%  gnsslog20231212102257H4 = importfile("C:\Users\pauli\OneDrive\Uni\3MSc\Projekt\Dynamisch_121223\RohdatenAuswertung_121223\gnss_log_2023_12_12_10_22_57_H4.txt", [30, Inf]);
%
%  See also READTABLE.
%
% Auto-generated by MATLAB on 04-Jan-2024 12:00:35

%% Input handling

% If dataLines is not specified, define defaults
if nargin < 2
    dataLines = [30, Inf];
end

%% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 37);

% Specify range and delimiter
opts.DataLines = dataLines;
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["VarName1", "VarName2", "VarName3", "VarName4", "VarName5", "VarName6", "VarName7", "VarName8", "VarName9", "VarName10", "VarName11", "VarName12", "VarName13", "Var14", "Var15", "Var16", "Var17", "Var18", "Var19", "Var20", "Var21", "Var22", "Var23", "Var24", "Var25", "Var26", "Var27", "Var28", "Var29", "Var30", "Var31", "Var32", "Var33", "Var34", "Var35", "Var36", "Var37"];
opts.SelectedVariableNames = ["VarName1", "VarName2", "VarName3", "VarName4", "VarName5", "VarName6", "VarName7", "VarName8", "VarName9", "VarName10", "VarName11", "VarName12", "VarName13"];
opts.VariableTypes = ["categorical", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Specify variable properties
opts = setvaropts(opts, ["Var14", "Var15", "Var16", "Var17", "Var18", "Var19", "Var20", "Var21", "Var22", "Var23", "Var24", "Var25", "Var26", "Var27", "Var28", "Var29", "Var30", "Var31", "Var32", "Var33", "Var34", "Var35", "Var36", "Var37"], "WhitespaceRule", "preserve");
opts = setvaropts(opts, ["VarName1", "Var14", "Var15", "Var16", "Var17", "Var18", "Var19", "Var20", "Var21", "Var22", "Var23", "Var24", "Var25", "Var26", "Var27", "Var28", "Var29", "Var30", "Var31", "Var32", "Var33", "Var34", "Var35", "Var36", "Var37"], "EmptyFieldRule", "auto");
opts = setvaropts(opts, ["VarName2", "VarName3", "VarName4", "VarName5", "VarName6", "VarName7", "VarName8", "VarName9", "VarName10", "VarName11", "VarName12", "VarName13"], "ThousandsSeparator", ",");


% Import the data
dataIMU = readtable(filename, opts);


indexOri = find(dataIMU.VarName1 == "OrientationDeg");
indexAcc = find(dataIMU.VarName1 == "Accel");
indexGyro = find(dataIMU.VarName1 == "Gyro");
indexMag = find(dataIMU.VarName1 == "Mag");
indexMag_Uncal = find(dataIMU.VarName1 == "UncalMag");
indexGyro_Uncal = find(dataIMU.VarName1 == "UncalGyro");
indexAcc_Uncal = find(dataIMU.VarName1 == "UncalAccel");

IMU.orientationDeg = dataIMU(indexOri,2:6);
allVars = 1: width(IMU.orientationDeg);
IMU.orientationDeg = renamevars(IMU.orientationDeg, allVars,["utcTimeMillis", "elapsedRealtimeNanos", "yawDeg", "rollDeg","pitchDeg" ]);
IMU.orientationDeg.date = datetime(IMU.orientationDeg.utcTimeMillis,'ConvertFrom','epochtime','TicksPerSecond',1e3,'Format','dd-MMM-yyyy HH:mm:ss.SSS') + hours(1);
IMU.orientationDeg = table2timetable(IMU.orientationDeg);

IMU.acceleration = dataIMU(indexAcc,2:6);
allVars = 1: width(IMU.acceleration);
IMU.acceleration = renamevars(IMU.acceleration, allVars,["utcTimeMillis", "elapsedRealtimeNanos", "AccelXMps2", "AccelYMps2","AccelZMps2" ]);
IMU.acceleration.date = datetime(IMU.acceleration.utcTimeMillis,'ConvertFrom','epochtime','TicksPerSecond',1e3,'Format','dd-MMM-yyyy HH:mm:ss.SSS') + hours(1);
IMU.acceleration = table2timetable(IMU.acceleration);

IMU.gyroscope = dataIMU(indexGyro,2:6);
allVars = 1: width(IMU.gyroscope);
IMU.gyroscope = renamevars(IMU.gyroscope, allVars,["utcTimeMillis", "elapsedRealtimeNanos", "GyroXRadPerSec", "GyroYRadPerSec","GyroZRadPerSec" ]);
IMU.gyroscope.date = datetime(IMU.gyroscope.utcTimeMillis,'ConvertFrom','epochtime','TicksPerSecond',1e3,'Format','dd-MMM-yyyy HH:mm:ss.SSS') + hours(1);
IMU.gyroscope = table2timetable(IMU.gyroscope);

IMU.magnitude = dataIMU(indexMag,2:6);
allVars = 1: width(IMU.magnitude);
IMU.magnitude = renamevars(IMU.magnitude, allVars,["utcTimeMillis", "elapsedRealtimeNanos", "MagXMicroT", "MagYMicroT","MagZMicroT" ]);
IMU.magnitude.date = datetime(IMU.magnitude.utcTimeMillis,'ConvertFrom','epochtime','TicksPerSecond',1e3,'Format','dd-MMM-yyyy HH:mm:ss.SSS') + hours(1);
IMU.magnitude = table2timetable(IMU.magnitude);

IMU.accelerationUncal = dataIMU(indexAcc_Uncal,2:9);
allVars = 1: width(IMU.accelerationUncal);
IMU.accelerationUncal = renamevars(IMU.accelerationUncal, allVars,["utcTimeMillis", "elapsedRealtimeNanos", "UncalAccelXMps2", "UncalAccelYMps2","UncalAccelZMps2","BiasXMps2", "BiasYMps2", "BiasZMps2" ]);
IMU.accelerationUncal.date = datetime(IMU.accelerationUncal.utcTimeMillis,'ConvertFrom','epochtime','TicksPerSecond',1e3,'Format','dd-MMM-yyyy HH:mm:ss.SSS') + hours(1);
IMU.accelerationUncal = table2timetable(IMU.accelerationUncal);

IMU.gyroscopeUncal = dataIMU(indexGyro_Uncal,2:9);
allVars = 1: width(IMU.gyroscopeUncal);
IMU.gyroscopeUncal = renamevars(IMU.gyroscopeUncal, allVars,["utcTimeMillis", "elapsedRealtimeNanos", "UncalGyroXRadPerSec", "UncalGyroYRadPerSec", "UncalGyroZRadPerSec", "DriftXRadPerSec", "DriftYRadPerSec", "DriftZRadPerSec"]);
IMU.gyroscopeUncal.date = datetime(IMU.gyroscopeUncal.utcTimeMillis,'ConvertFrom','epochtime','TicksPerSecond',1e3,'Format','dd-MMM-yyyy HH:mm:ss.SSS') + hours(1);
IMU.gyroscopeUncal = table2timetable(IMU.gyroscopeUncal);

IMU.magnitudeUncal = dataIMU(indexMag_Uncal,2:9);
allVars = 1: width(IMU.magnitudeUncal);
IMU.magnitudeUncal = renamevars(IMU.magnitudeUncal, allVars,["utcTimeMillis", "elapsedRealtimeNanos", "UncalMagXMicroT", "UncalMagYMicroT", "UncalMagZMicroT", "BiasXMicroT", "BiasYMicroT", "BiasZMicroT"]);
IMU.magnitudeUncal.date = datetime(IMU.magnitudeUncal.utcTimeMillis,'ConvertFrom','epochtime','TicksPerSecond',1e3,'Format','dd-MMM-yyyy HH:mm:ss.SSS') + hours(1);
IMU.magnitudeUncal = table2timetable(IMU.magnitudeUncal);

end